# Getting Started with Lectic

This guide will walk you through installing Lectic and conducting your first
conversation.

## Installation

There are a few ways to install Lectic, depending on your operating system
and environment.

- **Nix**: If you are a [Nix](https://nixos.org) user, you can install
  the latest version of Lectic directly from the git repository:
  ```bash
  nix profile install github:gleachkr/lectic
  ```

- **Linux (AppImage)**: For other Linux distributions (or WSL on
  Windows), you can download the AppImage from the [GitHub Releases
  page](https://github.com/gleachkr/Lectic/releases). Make it executable and
  place it somewhere on your `$PATH`.
  ```bash
  chmod +x lectic-*.AppImage
  mv lectic-*.AppImage ~/.local/bin/lectic
  ```

- **macOS (Binary)**: For macOS, you can download a binary from the [GitHub
  Releases page](https://github.com/gleachkr/Lectic/releases). Place it
  somewhere on your `$PATH`.

## Your First Conversation

### 1. Set Up Your API Keys

Lectic interacts with LLM providers via their APIs. You will need to have the
appropriate API key set as an environment variable. For example, to use an
Anthropic model, you would set:

```bash
export ANTHROPIC_API_KEY="your-api-key-here"
```

Lectic supports `ANTHROPIC_API_KEY`, `GEMINI_API_KEY`, `OPENAI_API_KEY`,
and `OPENROUTER_API_KEY`. It will default to the first one it finds,
alphabetically.

### 2. Create a Conversation File

Create a new file, for example `my_convo.lec`. The `.lec` extension is
recommended for editor integration.

In this file, add a YAML frontmatter header to configure your interlocutor:

```yaml
---
interlocutor:
    name: Assistant
    prompt: You are a helpful assistant.
    provider: anthropic
    model: claude-3-haiku-20240307
---

Hello, world! What is a fun fact about the Rust programming language?
```

### Core configuration you need

At a minimum, an interlocutor requires:

- prompt (required): The system prompt. This can be a plain string, or it
  can be loaded via file: or exec:. See below for examples.
- name (required): The display name used in :::Name blocks.

Common model settings:

- provider: Which backend to use (anthropic, openai, gemini, ollama,
  openrouter). If omitted, Lectic picks based on available API keys.
- model: The specific model name (e.g., claude-3-haiku-20240307).
- temperature, max_tokens, max_tool_use: Optional controls you can tune.

### Using file: and exec: for prompts

The prompt value can be loaded from external sources. The entire prompt is
replaced by the file contents or command output.

- From a file:
  ```yaml
  interlocutor:
      name: Assistant
      prompt: file:./prompts/assistant.md
  ```

- From a command (single line, no shell):
  ```yaml
  interlocutor:
      name: Assistant
      prompt: exec:echo 'You are a helpful assistant.'"
  ```

- From a script (multi‑line, shebang required):
  ```yaml
  interlocutor:
      name: Assistant
      prompt: |
        exec:#!/usr/bin/env bash
        cat <<'PREFACE'
        You are a helpful assistant.
        You will incorporate recent memory below.
        PREFACE
        echo
        echo "Recent memory:"
        sqlite3 "$LECTIC_DATA/memory.sqlite3" \
          "SELECT printf('- %s (%s)', text, ts) FROM memory \
           ORDER BY ts DESC LIMIT 10;"
  ```
  
  Notes:
  - Single‑line exec is executed directly, without a shell. For shell
  features, invoke a shell explicitly (e.g., bash -c '...').
  - Standard Lectic environment variables (LECTIC_DATA, etc.) are available
  to exec commands and scripts.
  - The prompt is evaluated fresh on each run. This makes it easy to build
    dynamic prompts that include the latest memory or other external state.
 
### 3. Run Lectic

Now, from your terminal, you can run Lectic on this file. The `-i` flag
tells Lectic to update the file in-place.

```bash
lectic -i my_convo.lec
```

Lectic will send your message to the LLM and append its response to the
file. The file will now look something like this:

```yaml
---
interlocutor:
    name: Assistant
    provider: anthropic
    model: claude-3-haiku-20240307
    prompt: You are a helpful assistant.
---

Hello, world! What is a fun fact about the Rust programming language?

:::Assistant

A fun fact about Rust is that its compiler is named `rustc`, and its mascot
is a friendly crab named Ferris! The community adopted the crab as an
unofficial mascot because crustaceans are known for being robust and having
good "error handling" (hard shells).

:::
```

You can now add your next message to the file and run the command again to
continue the conversation.

## Editor Integration

Running commands manually is fine, but the intended workflow is to integrate
Lectic with your text editor. This allows you to update the conversation
with a single key press.

- **[Neovim](https://github/gleachkr/Lectic/tree/main/extra/lectic.nvim/README.md)**: A full-featured plugin is
  available.
- **[VSCode](https://github/gleachkr/Lectic/tree/main/extra/lectic.vscode/README.md)**: A VSCode extension is
  available.
- **Other Editors**: Most editors support piping the current buffer's
  content through an external command. You can configure your editor to
  replace the buffer with the output of `cat your_file.lec | lectic`.
